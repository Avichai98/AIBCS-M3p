package app.alertservice.queues

import app.alertservice.boundaries.AlertBoundary
import app.alertservice.boundaries.VehicleBoundary
import app.alertservice.interfaces.AlertService
import org.springframework.kafka.annotation.KafkaListener
import org.springframework.stereotype.Service

@Service
class KafkaVehicleListener(
    private val kafkaVehicleSender: KafkaVehicleSender,
    private val alertService: AlertService
) {
    @KafkaListener(topics = ["vehicle-state-updated"], groupId = "alert-service")
    fun consume(vehicle: VehicleBoundary) {
        if (vehicle.stayDuration!! > 600) {
            println("ðŸ“¥ Received VehicleEvent: $vehicle")
            val alert = AlertBoundary(
                id = null, // ID will be generated by the database
                cameraId = vehicle.cameraId,
                type = vehicle.type,
                severity = "LOW", // Default severity can be adjusted based on business logic
                description = "Vehicle detected: ${vehicle.manufacturer} ${vehicle.color} ${vehicle.type}",
                timestamp = null, // Timestamp will be set by the database
                vehicleBoundary = vehicle
            )

            // Send alert to Kafka
            println("ðŸš¨ Creating alert for vehicle: $alert")
            kafkaVehicleSender.sendAlert(alert)

            // Send alert to email
            println("ðŸ“§ Sending alert to email: $alert")
            this.alertService.sendAlert(alert).subscribe()
        }
    }
}
