
services:

  car-detection-service:
    build:
      context: ./services/python-services
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    env_file: .env
    depends_on:
      - data-management-service
      - kafka
    restart: on-failure
    devices:
      - "/dev/video0:/dev/video0"
    privileged: true

  data-management-service:
    build:
      context: ./services/kotlin-services/DataService
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - TZ=Asia/Jerusalem
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      - mongodb
      - kafka
    restart: on-failure

  alert-management-service:
    build:
      context: ./services/kotlin-services/AlertService
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    environment:
        - TZ=Asia/Jerusalem
        - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      - data-management-service
    restart: on-failure

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.3
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    restart: on-failure

  kafka:
    image: confluentinc/cp-kafka:7.4.3
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    restart: on-failure

  mongodb:
    image: 'mongo:8.0'
    ports:
      - '27017:27017'
    volumes:
      - mongodb_data:/data/db
    restart: on-failure

volumes:
  mongodb_data: